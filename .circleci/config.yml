version: 2
jobs:
  build-and-push-image:
    docker:
      - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            apk add py-pip
            pip install awscli
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}" 
            aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}" 
            aws configure set aws_session_token "${AWS_SESSION_TOKEN}"

      - run:
          name: Login into ECR and Docker
          command: |
            aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${AWS_ECR_REPO_NAME}"
      - run:
          name: Build and tag Image
          command: |
            docker build -t "${AWS_ECR_IMAGE_NAME}":"${AWS_ECR_IMAGE_TAG}" .
            docker tag "${AWS_ECR_IMAGE_NAME}" "${AWS_ECR_REPO_NAME}":"${CIRCLE_SHA1}"
      - run:
          name: Push Image to AWS ECR
          command: |
            docker push "${AWS_ECR_REPO_NAME}":"${CIRCLE_SHA1}"
      - run:
          name: Create Variable
          command: |
            REPO_WITH_TAG="${AWS_ECR_REPO_NAME}":"${CIRCLE_SHA1}"
  deploy-to-ecs:
    docker:
      - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            ls -la
            apk add py-pip
            pip install awscli
            apk add jq
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}" 
            aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}" 
            aws configure set aws_session_token "${AWS_SESSION_TOKEN}"
      - run:
          name: Create Variable
          command: |
            REPO_WITH_TAG="${AWS_ECR_REPO_NAME}":"${CIRCLE_SHA1}"
      - run:
          name: Update Task Definition
          command: |
            aws configure set default.region "${AWS_REGION}"
            UPDATED_IMAGE=$(cat task-definition.json | jq --arg IMAGE "$REPO_WITH_TAG" '.containerDefinitions[0].image = $IMAGE')
            REVISION=$(aws ecs register-task-definition --cli-input-json file://task-definition.json | jq '.taskDefinition.revision')
            aws ecs update-service --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}" --task-definition "${TASK_DEFINITION_NAME}":"${REVISION}" --force-new-deployment

# Orchestrate or schedule a set of jobs
workflows:
  version: 2
  build:
    jobs:
    - build-and-push-image:
        filters:
          branches:
            only: 
              - master
    - deploy-to-ecs:
        requires:
          - build-and-push-image